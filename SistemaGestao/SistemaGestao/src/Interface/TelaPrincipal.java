/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interface;

import dao.AlunosDAO;
import dao.CursosDAO;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.io.File;
import java.io.FileWriter;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import modelo.Alunos;
import modelo.Cursos;

/**
 *
 * @author Léo
 */
public class TelaPrincipal extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(TelaPrincipal.class.getName());

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
        configurarTabelaAlunos();
        carregarTabelaAlunos();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

   private void excluirAlunoSelecionado() {
    int linhaSelecionada = tabelaAlunos.getSelectedRow();

    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(this, "Selecione um aluno para excluir.");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) tabelaAlunos.getModel();
    int idAluno = (int) model.getValueAt(linhaSelecionada, 0);
    String nomeAluno = (String) model.getValueAt(linhaSelecionada, 1);

    int confirmacao = JOptionPane.showConfirmDialog(
        this,
        "Deseja realmente excluir o aluno \"" + nomeAluno + "\"?",
        "Confirmação",
        JOptionPane.YES_NO_OPTION
    );

    if (confirmacao == JOptionPane.YES_OPTION) {
        try {
            AlunosDAO dao = new AlunosDAO();

            // Apaga aluno do banco
            dao.delete(idAluno);

            // Se quiser, pode carregar o aluno para atualizar lista do curso em memória
            // Por exemplo, dao.findById(idAluno) antes de deletar, mas aqui deletamos direto.
            // Se você tem a lista de cursos e alunos em memória, remova o aluno do curso:
            // (depende do seu gerenciamento de objetos)

            // Remove da tabela GUI
            model.removeRow(linhaSelecionada);

            JOptionPane.showMessageDialog(this, "Aluno excluído com sucesso.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir aluno: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
}
    
    private void excluirCursoSelecionado() throws SQLException {
    int linhaSelecionada = tabelaCursos.getSelectedRow();

    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(this, "Selecione um curso para excluir.");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) tabelaCursos.getModel();
    int idCurso = (int) model.getValueAt(linhaSelecionada, 0);
    String nomeCurso = (String) model.getValueAt(linhaSelecionada, 1);

    int confirmacao = JOptionPane.showConfirmDialog(
        this,
        "Deseja realmente excluir o curso \"" + nomeCurso + "\"?",
        "Confirmação",
        JOptionPane.YES_NO_OPTION
    );

    if (confirmacao == JOptionPane.YES_OPTION) {
        CursosDAO dao = new CursosDAO();

        dao.delete(idCurso);
   
        model.removeRow(linhaSelecionada); // Remove da tabela

        JOptionPane.showMessageDialog(this, "Curso excluído com sucesso.");
    }
}
    
    public void carregarTabelaCursos() {
    
    
    CursosDAO dao = new CursosDAO();
    List<Cursos> lista = dao.readAll();  // Cursos ativos

    DefaultTableModel model = (DefaultTableModel) tabelaCursos.getModel();
    model.setRowCount(0); // Limpa tabela

    for (Cursos c : lista) {
        Object[] linha = new Object[]{
            c.getIdCurso(),
            c.getNomeCurso(),
            c.getCargaHoraria(),
            c.getLimiteAlunos(),
            c.isAtivo()
        };
        model.addRow(linha);
    }
}

    private void configurarTabelaCursos() {
   DefaultTableModel model = new DefaultTableModel(
        new Object[]{"ID", "Nome", "Carga Horária", "Limite Alunos", "Ativo"}, 0) {
        
        @Override
        public boolean isCellEditable(int row, int col) {
            return col != 0; // ID não editável
        }

        @Override
        public Class<?> getColumnClass(int col) {
            if (col == 4) return Boolean.class; // Coluna Ativo como checkbox
            if (col == 2 || col == 3) return Integer.class; // Carga e limite como Integer
            return String.class;
        }
    };

    tabelaCursos.setModel(model);
    // Editor para checkbox na coluna Ativo
    tabelaCursos.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(new JCheckBox()));

    // Listener para salvar automaticamente após edição
    tabelaCursos.getModel().addTableModelListener(e -> {
        if (e.getType() == javax.swing.event.TableModelEvent.UPDATE) {
            int row = e.getFirstRow();
            DefaultTableModel modelo = (DefaultTableModel) tabelaCursos.getModel();

            try {
                // Conversão segura para Integer para evitar ClassCastException
                Object idObj = modelo.getValueAt(row, 0);
                int idCurso = (idObj instanceof Integer) ? (Integer) idObj : Integer.parseInt(idObj.toString());

                String nomeCurso = modelo.getValueAt(row, 1).toString();

                Object cargaObj = modelo.getValueAt(row, 2);
                int cargaHoraria = (cargaObj instanceof Integer) ? (Integer) cargaObj : Integer.parseInt(cargaObj.toString());

                Object limiteObj = modelo.getValueAt(row, 3);
                int limiteAlunos = (limiteObj instanceof Integer) ? (Integer) limiteObj : Integer.parseInt(limiteObj.toString());

                boolean ativo = (Boolean) modelo.getValueAt(row, 4);

                Cursos curso = new Cursos();
                curso.setIdCurso(idCurso);
                curso.setNomeCurso(nomeCurso);
                curso.setCargaHoraria(cargaHoraria);
                curso.setLimiteAlunos(limiteAlunos);
                curso.setAtivo(ativo);

                new CursosDAO().update(curso);

                JOptionPane.showMessageDialog(
                    null,
                    "Curso \"" + nomeCurso + "\" atualizado com sucesso.",
                    "Confirmação",
                    JOptionPane.INFORMATION_MESSAGE
                );


            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar curso: " + ex.getMessage());
                ex.printStackTrace();
            }
        }
     
    });
}

    
    private void carregarTabelaAlunos() {
        
    AlunosDAO dao = new AlunosDAO();
    List<Alunos> lista = dao.readAllWithCurso();  // método com join que te passei

    DefaultTableModel modelo = (DefaultTableModel) tabelaAlunos.getModel();
    modelo.setRowCount(0); // limpa a tabela

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    for (Alunos a : lista) {
        Object[] linha = new Object[]{
            a.getIdAluno(),
            a.getNome(),
            a.getCpf(),
            a.getEmail(),
            a.getDataNascimento().format(formatter),
            a.getCurso() != null ? a.getCurso().getNomeCurso() : "",
            a.isAtivo()
        };
        modelo.addRow(linha);
    }

    
}
    
    private void configurarTabelaAlunos() {
    DefaultTableModel model = new DefaultTableModel(
        new Object[]{"ID", "Nome", "CPF", "Email", "Data Nasc.", "Curso", "Ativo"}, 0) {

        @Override
        public boolean isCellEditable(int row, int col) {
            return col != 0; // ID não editável
        }

        @Override
        public Class<?> getColumnClass(int col) {
            if (col == 6) return Boolean.class; // Coluna Ativo checkbox
            return String.class;
        }
    };

    tabelaAlunos.setModel(model);
    // Configurar editor checkbox na coluna Ativo
    tabelaAlunos.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(new JCheckBox()));

    configurarListenerTabelaAlunos(); // liga listener para salvar alterações
}
 
private void configurarListenerTabelaAlunos() {
    tabelaAlunos.getModel().addTableModelListener(new TableModelListener() {
        @Override
        public void tableChanged(TableModelEvent e) {
            if (e.getType() == TableModelEvent.UPDATE) {
                int linha = e.getFirstRow();
                int coluna = e.getColumn();

                DefaultTableModel model = (DefaultTableModel) tabelaAlunos.getModel();

                try {
                    // Pegando valores editados da linha
                    int idAluno = (int) model.getValueAt(linha, 0);
                    String nome = (String) model.getValueAt(linha, 1);
                    String cpf = (String) model.getValueAt(linha, 2);
                    String email = (String) model.getValueAt(linha, 3);
                    String dataNascStr = (String) model.getValueAt(linha, 4);
                    String nomeCurso = (String) model.getValueAt(linha, 5);
                    Boolean ativo = (Boolean) model.getValueAt(linha, 6);

                    // Parse da data
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    LocalDate dataNascimento = LocalDate.parse(dataNascStr, formatter);

                    // Buscar o curso pelo nome para pegar o ID
                    CursosDAO cursosDAO = new CursosDAO();
                    Cursos cursoSelecionado = cursosDAO.findByNome(nomeCurso);

                    if (cursoSelecionado == null) {
                        JOptionPane.showMessageDialog(null, "Curso \"" + nomeCurso + "\" não encontrado!");
                        return;
                    }

                    // Criar aluno com dados atualizados
                    Alunos alunoAtualizado = new Alunos();
                    alunoAtualizado.setIdAluno(idAluno);
                    alunoAtualizado.setNome(nome);
                    alunoAtualizado.setCpf(cpf);
                    alunoAtualizado.setEmail(email);
                    alunoAtualizado.setDataNascimento(dataNascimento);
                    alunoAtualizado.setCurso(cursoSelecionado);
                    alunoAtualizado.setAtivo(ativo);

                    // Atualizar no banco
                    AlunosDAO alunosDAO = new AlunosDAO();
                    alunosDAO.update(alunoAtualizado);
                    
                    JOptionPane.showMessageDialog(null, "Aluno atualizado com sucesso!");

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar aluno: " + ex.getMessage());
                    ex.printStackTrace();
                }
            }
        }
    });
}
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        MenuFixo = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Root = new javax.swing.JPanel();
        alunos = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaAlunos = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnRelatorio = new javax.swing.JButton();
        cursos = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCursos = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        MenuFixo.setBackground(new java.awt.Color(204, 0, 0));

        jButton1.setBackground(new java.awt.Color(204, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Alunos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 0, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Cursos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(51, 51, 51));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Fechar");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/aluno.png"))); // NOI18N

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/curso.png"))); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/pare.png"))); // NOI18N

        javax.swing.GroupLayout MenuFixoLayout = new javax.swing.GroupLayout(MenuFixo);
        MenuFixo.setLayout(MenuFixoLayout);
        MenuFixoLayout.setHorizontalGroup(
            MenuFixoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuFixoLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(MenuFixoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MenuFixoLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MenuFixoLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MenuFixoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18))
        );
        MenuFixoLayout.setVerticalGroup(
            MenuFixoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuFixoLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel7)
                .addGap(54, 54, 54)
                .addGroup(MenuFixoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(MenuFixoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        Root.setLayout(new java.awt.CardLayout());

        alunos.setBackground(new java.awt.Color(51, 51, 51));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Alunos");

        jPanel2.setPreferredSize(new java.awt.Dimension(300, 3));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        tabelaAlunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "CPF", "Email", "Data de Nascimento", "Curso", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaAlunos);

        jButton12.setBackground(new java.awt.Color(51, 51, 51));
        jButton12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton12.setForeground(new java.awt.Color(255, 255, 255));
        jButton12.setText("Buscar");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(51, 51, 51));
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/maisnamedida.png"))); // NOI18N
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/deletenamedida.png"))); // NOI18N
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/aluno.png"))); // NOI18N

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/lupa.png"))); // NOI18N

        btnRelatorio.setBackground(new java.awt.Color(51, 51, 51));
        btnRelatorio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRelatorio.setForeground(new java.awt.Color(255, 255, 255));
        btnRelatorio.setText("Gerar Relatório");
        btnRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout alunosLayout = new javax.swing.GroupLayout(alunos);
        alunos.setLayout(alunosLayout);
        alunosLayout.setHorizontalGroup(
            alunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, alunosLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(alunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
                    .addGroup(alunosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
                    .addGroup(alunosLayout.createSequentialGroup()
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
            .addGroup(alunosLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        alunosLayout.setVerticalGroup(
            alunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, alunosLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(alunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(alunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(alunosLayout.createSequentialGroup()
                        .addGroup(alunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2)
                            .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                        .addGap(34, 34, 34)
                        .addGroup(alunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, alunosLayout.createSequentialGroup()
                                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, alunosLayout.createSequentialGroup()
                                .addGroup(alunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnRelatorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                                .addGap(35, 35, 35))))
                    .addGroup(alunosLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        Root.add(alunos, "alunos");

        cursos.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Cursos");

        jPanel1.setPreferredSize(new java.awt.Dimension(300, 3));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        tabelaCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Limite de aluno", "Carga Horária", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaCursos);

        jButton6.setBackground(new java.awt.Color(51, 51, 51));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Buscar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(51, 51, 51));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/maisnamedida.png"))); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/deletenamedida.png"))); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/curso.png"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/lupa.png"))); // NOI18N

        javax.swing.GroupLayout cursosLayout = new javax.swing.GroupLayout(cursos);
        cursos.setLayout(cursosLayout);
        cursosLayout.setHorizontalGroup(
            cursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cursosLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(cursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
                    .addGroup(cursosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
                    .addGroup(cursosLayout.createSequentialGroup()
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
            .addGroup(cursosLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cursosLayout.setVerticalGroup(
            cursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cursosLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(cursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(cursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(cursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1)
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addGap(34, 34, 34)
                .addGroup(cursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cursosLayout.createSequentialGroup()
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cursosLayout.createSequentialGroup()
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );

        Root.add(cursos, "cursos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(MenuFixo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Root, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Root, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(MenuFixo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CardLayout card = (CardLayout) Root.getLayout();      
        card.show(Root, "cursos");
        configurarTabelaCursos();
        carregarTabelaCursos();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CardLayout card = (CardLayout) Root.getLayout();    
        card.show(Root, "alunos");
        carregarTabelaAlunos();       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            excluirCursoSelecionado();
        } catch (SQLException ex) {
            Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
    excluirAlunoSelecionado();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
       CriarCurso criarCurso = new CriarCurso();
    criarCurso.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    criarCurso.setVisible(true); // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        CriarAluno criarAluno = new CriarAluno();
        criarAluno.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // não vai fecha o programa todo
        criarAluno.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
    //Captura o termo digitado
    String termo = jTextField2.getText().trim();

    //Busca no banco
    AlunosDAO dao = new AlunosDAO();
    List<Alunos> resultados = dao.search(termo);

    //Atualiza a tabela
    DefaultTableModel model = (DefaultTableModel) tabelaAlunos.getModel();
    model.setRowCount(0);  // limpa tudo

    DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    for (Alunos a : resultados) {
        Object[] row = new Object[] {
            a.getIdAluno(),
            a.getNome(),
            a.getCpf(),
            a.getEmail(),
            a.getDataNascimento().format(fmt),
            a.getCurso() != null ? a.getCurso().getNomeCurso() : "",
            a.isAtivo()
        };
        model.addRow(row);
    }

    //caso nao ache
    if (resultados.isEmpty()) {
        JOptionPane.showMessageDialog(this,
            "Nenhum aluno encontrado para: " + termo,
            "Pesquisa",
            JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
      //pega o texto de busca
    String termo = jTextField1.getText().trim();

    //se vazio, recarrega todos
    if (termo.isEmpty()) {
        carregarTabelaCursos();
        return;
    }

    //executa a busca
    CursosDAO dao = new CursosDAO();
    List<Cursos> resultados = dao.search(termo);

    //atualiza a tabelaCursos
    DefaultTableModel model = (DefaultTableModel) tabelaCursos.getModel();
    model.setRowCount(0);
    for (Cursos c : resultados) {
        Object[] row = new Object[] {
            c.getIdCurso(),
            c.getNomeCurso(),
            c.getCargaHoraria(),
            c.getLimiteAlunos(),
            c.isAtivo()
        };
        model.addRow(row);
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void btnRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioActionPerformed
   try {
        AlunosDAO dao = new AlunosDAO();
        List<Alunos> listaAlunos = dao.readAllWithCurso(); // retorna todos os alunos junto com seus cursos

        if (listaAlunos.isEmpty()) { 
            JOptionPane.showMessageDialog(this, "Nenhum aluno encontrado.");    // verifica se há alunos
            return;
        }

        // monta conteúdo do relatório
        StringBuilder relatorio = new StringBuilder();
        relatorio.append("Relatório de Alunos por Curso\n");
        relatorio.append("====================================\n\n");

        // adiciona as informações ao relatório
        for (Alunos aluno : listaAlunos) {
            relatorio.append("Nome: ").append(aluno.getNome()).append("\n");
            relatorio.append("CPF: ").append(aluno.getCpf()).append("\n");
            relatorio.append("Curso: ").append(
                (aluno.getCurso() != null) ? aluno.getCurso().getNomeCurso() : "Sem curso"
            ).append("\n");
            relatorio.append("Status: ").append(aluno.isAtivo() ? "Ativo" : "Inativo").append("\n");
            relatorio.append("------------------------------------\n");
        }

        // escolher local para salvar
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Escolha onde salvar o relatório");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // sugere nome padrão
        fileChooser.setSelectedFile(new File("relatorio_alunos.txt"));

        // mostra o JFileChooser e salva o arquivo
        int resultado = fileChooser.showSaveDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File arquivoSelecionado = fileChooser.getSelectedFile();

            try (FileWriter writer = new FileWriter(arquivoSelecionado)) {
                writer.write(relatorio.toString());
            }

            JOptionPane.showMessageDialog(this,
                "Relatório salvo com sucesso em:\n" + arquivoSelecionado.getAbsolutePath());
        }

        // para caso ocorra algum erro
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao gerar relatório: " + ex.getMessage());
}

    }//GEN-LAST:event_btnRelatorioActionPerformed

    public static void main(String args[]) {

    com.formdev.flatlaf.FlatLightLaf.setup();
    try {
        UIManager.setLookAndFeel(new com.formdev.flatlaf.FlatLightLaf());
    } catch (Exception ex) {
        ex.printStackTrace();
    }


    UIManager.put("Table.font", new Font("Segoe UI", Font.PLAIN, 13));  
    UIManager.put("Table.background", Color.WHITE);
    UIManager.put("Table.alternateRowColor", new Color(245, 248, 255));
    UIManager.put("Table.gridColor", new Color(200, 200, 200));
    UIManager.put("Table.selectionBackground", new Color(50,50,50));
    UIManager.put("Table.selectionForeground", Color.WHITE);
    UIManager.put("Table.showVerticalLines", true);
    UIManager.put("Table.showHorizontalLines", true);
    UIManager.put("TableHeader.font", new Font("Segoe UI", Font.BOLD, 13));
    UIManager.put("TableHeader.background", Color.BLACK);
    UIManager.put("TableHeader.foreground", Color.WHITE);


    EventQueue.invokeLater(() -> {
    TelaPrincipal tela = new TelaPrincipal();
    tela.pack(); // Garante que os componentes sejam dimensionados corretamente
    tela.setLocationRelativeTo(null); // Centraliza na tela
    tela.setVisible(true);
});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MenuFixo;
    private javax.swing.JPanel Root;
    private javax.swing.JPanel alunos;
    private javax.swing.JButton btnRelatorio;
    private javax.swing.JPanel cursos;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable tabelaAlunos;
    private javax.swing.JTable tabelaCursos;
    // End of variables declaration//GEN-END:variables
}
